@page "/Bills"
@using BlazorApp.Client.Shared.Dialogs
@using BlazorApp.Shared.Models
@using BlazorApp.Shared.Repositories
@using Blazored.LocalStorage
@using System.Text.Json
@inject ILocalStorageService localStorage
@inject IDialogService Dialog
@inject IJSRuntime js
@inject ISnackbar Snackbar
@inject FinanceRepository financeRepo

@if (AllBills?.Count() > 0)
{
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="DeleteAll">Delete All</MudButton>
}
<InputFile id="fileInput" OnChange="UploadFiles" multiple hidden />

<MudButton HtmlTag="label"
           Variant="Variant.Filled"
           Color="Color.Primary"
           StartIcon="@Icons.Filled.CloudUpload"
           for="fileInput">
    Import
</MudButton>
<MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="DownloadFile">Export</MudButton>

@foreach (var bill in AllBills)
{
    <MudCard Class="mt-4 mb-4">
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Color="Color.Default" Variant="Variant.Filled">
                    <MudIcon Style="@($"color:{Colors.Green.Lighten5};")" Icon="@Icons.Material.Outlined.Lightbulb" Size="Size.Large" />
                </MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@bill.Name</MudText>
                <MudText Typo="Typo.body2">Due In: @(DateTime.Today.Day - @bill.BeginDate.GetValueOrDefault().Day) days.</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                    <MudMenuItem>Edit</MudMenuItem>
                    <MudMenuItem>Delete</MudMenuItem>
                </MudMenu>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudText Typo="Typo.body2">$@bill.Amount</MudText>
        </MudCardContent>
    </MudCard>
}
<MudFab Color="Color.Primary"
        StartIcon="@Icons.Material.Filled.Add"
        Style="position:fixed;bottom:50px;right:50px"
        Size="Size.Large"
        OnClick="AddBill" />
<MudSpacer />
@code {

    public List<Bill> AllBills { get; set; } = new List<Bill>();
    IList<IBrowserFile> files = new List<IBrowserFile>();


    protected override async Task OnInitializedAsync()
    {
        //if (!await localStorage.ContainKeyAsync("bills"))
        //    await localStorage.SetItemAsync<List<Bill>>("bills", AllBills);
        //AllBills = await localStorage.GetItemAsync<List<Bill>>("bills");
        financeRepo = new FinanceRepository("finance.db3");
        AllBills = await financeRepo.GetAllBills();
    }
    private async Task AddBill()
    {
        var dialog = Dialog.Show<AddBillDialog>("Add New Bill");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var billToAdd = (Bill)result.Data;
            financeRepo.AddNewBill(billToAdd);
            //billToAdd.Id = AllBills.Count();
            //AllBills.Add(billToAdd);
            //await localStorage.SetItemAsync<List<Bill>>("bills", AllBills);
        }

    }
    private async Task DeleteAll()
    {
        AllBills.Clear();
        await localStorage.SetItemAsync<List<Bill>>("bills", AllBills);
        StateHasChanged();
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            //files.Add(file);
            string fileContent = null;
            using (var reader = new System.IO.StreamReader(file.OpenReadStream()))
            {
                var content = await reader.ReadToEndAsync();
                var result = JsonSerializer.Deserialize<List<Bill>>(content);
                try
                {
                    AllBills.AddRange(result);
                }
                catch (Exception ex)
                {
                    Snackbar.Add(ex.Message, Severity.Error);
                }
            }
        }
        //TODO upload the files to the server
    }
}

@functions {
    void DownloadFile()
    {
        //var text = "Hello, world!";
        //var bytes = System.Text.Encoding.UTF8.GetBytes(text);

        var data = JsonSerializer.Serialize(AllBills, options: new JsonSerializerOptions() { WriteIndented = true });
        var bytes = System.Text.Encoding.UTF8.GetBytes(data);

        FileUtil.SaveAs(js, $"BalanceForcaster - Bills - {DateTime.Today.ToString("MMddyyyy")}.json", bytes);
    }
}

